const
	MAX_STUDENTS: integer = 20;		{Max number of students}
	NUM_ACTIVITIES: integer = 7;	{Max number of activites of the subject}
	
	MIN_C_MINUS: real = 3.0;		{Minimum mark for grade C-}
	MIN_C_PLUS: real = 5.0;			{Minimum mark for grade C+}
	MIN_B: real = 7.0;				{Minimum mark for grade B}
	MIN_A: real = 9.0;				{Minimum mark for grade A}
	
	CAA_WEIGHT: integer = 10;		{Percent weight of each CAA in the final grade}
	PR_WEIGHT: integer = 20;		{Percent weight of each PR in the final grade}
	PERCENT: real = 100.0;			{100%, used to with *_WEIGHT variables}
end const

type
	{User defined types}
	tGrade = {A, B, C_PLUS, C_MINUS, D}
	tActivityType = {CAA, PR} 

	tActivity = record
		activityMark: real;									{Activity Mark}
		activityType;										{Activity Type}
	end record	

	tStudent = record
		studentId: integer;									{Student ID}               
		name: string;										{Student Name}
		activities: vector [NUM_ACTIVITIES] of tActivity;	{Student Activities}
	end record
end type

{Auxiliary functions}

{Exercise 1}
function getFinalGPA(student: tStudent): real
	var
		finalGPA: real;
		i: integer;
	end var

	finalGPA := 0;
	for i = 0 to NUM_ACTIVITIES do
		if student.activities[i].activityType = CAA then
			finalGPA = finalGPA + student.activities[i].activityMark
				* integerToReal(integerToReal(CAA_WEIGHT) / PERCENT);
		else 
			finalGPA = finalGPA + student.activities[i].activityMark
				* integerToReal(integerToReal(PR_WEIGHT) / PERCENT);
		end if
	end for
	return finalGPA;
end function

{Exercise 2}
function getFinalGrade(finalGPA: real): tGrade
	var
		finalGrade: tGrade;
	end var

	finalGrade = A;
	if finalGPA < MIN_A then
		finalGrade = B;
	end if
	if finalGPA < MIN_B then 
		finalGrade = C_PLUS;
	end if
	if finalGPA < MIN_C_PLUS) the
		finalGrade = C_MINUS;
	end if
	if finalGPA < MIN_C_MINUS then
		finalGrade = D;
	end if

	return finalGrade;
end function

{End auxiliary functions}

algorithm UOCSubjectGrade var
		students: vector [MAX_STUDENTS] of tStudent;
		studentCount, studentId, i: integer;
		
		filename: string;
		mark: real;
		grade: tGrade;
		
		isRead, found: boolean;
	end var

	{Load data from file}
    writeString("LOAD DATA FROM FILE. ENTER FILE NAME >>");
    filename := readString();
    studentsLoadDataFromFile(filename, students, studentCount, isRead);	
	
	{Data successfully loaded}
	if isRead then 
		{Exercise 3}
		writeString("RESULTS:");		
		for i = 0 to studentCount do
			mark = getFinalGPA(students[i]);
			grade = getFinalGrade(mark);
			writeStudentData(students[i], mark, grade);	
		end for
		
		{Exercise 4}
		{Select a student by ID and list all his activities}
		writeString("SELECT STUDENT BY ID >>");
		studentId := readInteger();
		
		{Search student by ID}
		found := false;
		for i = 0 to studentCount do
			if students[i].studentId = studentId then
				writeStudentActivities(students[i]);
				found := true;	
			end if
		end for
		if found == false then
			writeString("STUDENT NOT FOUND");
		end if
	else
		{No data recovered}
		writeString("NO STUDENTS RECOVERED");	
	end if
end algorithm

